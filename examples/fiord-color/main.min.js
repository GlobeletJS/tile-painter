var app = (function (exports) {
  'use strict';

  // From mapbox-gl-js, style-spec/deref.js
  const refProperties = [
    'type', 
    'source', 
    'source-layer', 
    'minzoom', 
    'maxzoom', 
    'filter', 
    'layout'
  ];

  /**
   * Given an array of layers, some of which may contain `ref` properties
   * whose value is the `id` of another property, return a new array where
   * such layers have been augmented with the 'type', 'source', etc. properties
   * from the parent layer, and the `ref` property has been removed.
   *
   * The input is not modified. The output may contain references to portions
   * of the input.
   */
  function derefLayers(layers) {
    layers = layers.slice(); // ??? What are we trying to achieve here?

    const map = Object.create(null); // stackoverflow.com/a/21079232/10082269
    layers.forEach( layer => { map[layer.id] = layer; } );

    for (let i = 0; i < layers.length; i++) {
      if ('ref' in layers[i]) {
        layers[i] = deref(layers[i], map[layers[i].ref]);
      }
    }

    return layers;
  }

  function deref(layer, parent) {
    const result = {};

    for (const k in layer) {
      if (k !== 'ref') {
        result[k] = layer[k];
      }
    }

    refProperties.forEach((k) => {
      if (k in parent) {
        result[k] = parent[k];
      }
    });

    return result;
  }

  function expandStyleURL(url, token) {
    var prefix = /^mapbox:\/\/styles\//;
    if ( !url.match(prefix) ) return url;
    var apiRoot = "https://api.mapbox.com/styles/v1/";
    return url.replace(prefix, apiRoot) + "?access_token=" + token;
  }

  function expandSpriteURLs(url, token) {
    // Returns an array containing urls to .png and .json files
    var prefix = /^mapbox:\/\/sprites\//;
    if ( !url.match(prefix) ) return {
      image: url + ".png", 
      meta: url + ".json",
    };

    // We have a Mapbox custom url. Expand to an absolute URL, as per the spec
    var apiRoot = "https://api.mapbox.com/styles/v1/";
    url = url.replace(prefix, apiRoot) + "/sprite";
    var tokenString = "?access_token=" + token;
    return {
      image: url + ".png" + tokenString, 
      meta: url + ".json" + tokenString,
    };
  }

  function expandTileURL(url, token) {
    var prefix = /^mapbox:\/\//;
    if ( !url.match(prefix) ) return url;
    var apiRoot = "https://api.mapbox.com/v4/";
    return url.replace(prefix, apiRoot) + ".json?secure&access_token=" + token;
  }

  function getJSON(dataHref) {
    // Wrap the fetch API to force a rejected promise if response is not OK
    const checkResponse = (response) => (response.ok)
      ? response.json()
      : Promise.reject(response); // Can check .status on returned response

    return fetch(dataHref).then(checkResponse);
  }

  function getImage(href) {
    const errMsg = "ERROR in getImage for href " + href;
    const img = new Image();

    return new Promise( (resolve, reject) => {
      img.onerror = () => reject(errMsg);

      img.onload = () => (img.complete && img.naturalWidth !== 0)
          ? resolve(img)
          : reject(errMsg);

      img.crossOrigin = "anonymous";
      img.src = href;
    });
  }

  function buildFeatureFilter(filterObj) {
    // filterObj is a filter definition following the "deprecated" syntax:
    // https://docs.mapbox.com/mapbox-gl-js/style-spec/#other-filter
    if (!filterObj) return () => true;

    var type, key, vals;

    // If this is a combined filter, the vals are themselves filter definitions
    [type, ...vals] = filterObj;
    switch (type) {
      case "all": {
        let filters = vals.map(buildFeatureFilter);  // Iteratively recursive!
        return (d) => filters.every( filt => filt(d) );
      }
      case "any": {
        let filters = vals.map(buildFeatureFilter);
        return (d) => filters.some( filt => filt(d) );
      }
      case "none": {
        let filters = vals.map(buildFeatureFilter);
        return (d) => filters.every( filt => !filt(d) );
      }
    }

    [type, key, ...vals] = filterObj;
    var getVal = initFeatureValGetter(key);

    switch (type) {
      // Existential Filters
      case "has": 
        return d => !!getVal(d); // !! forces a Boolean return
      case "!has": 
        return d => !getVal(d);

      // Comparison Filters
      case "==": 
        return d => getVal(d) === vals[0];
      case "!=":
        return d => getVal(d) !== vals[0];
      case ">":
        return d => getVal(d) > vals[0];
      case ">=":
        return d => getVal(d) >= vals[0];
      case "<":
        return d => getVal(d) < vals[0];
      case "<=":
        return d => getVal(d) <= vals[0];

      // Set Membership Filters
      case "in" :
        return d => vals.includes( getVal(d) );
      case "!in" :
        return d => !vals.includes( getVal(d) );
      default:
        console.log("prepFilter: unknown filter type = " + filterObj[0]);
    }
    // No recognizable filter criteria. Return a filter that is always true
    return () => true;
  }

  function initFeatureValGetter(key) {
    switch (key) {
      case "$type":
        // NOTE: data includes MultiLineString, MultiPolygon, etc-NOT IN SPEC
        return f => {
          let t = f.geometry.type;
          if (t === "MultiPoint") return "Point";
          if (t === "MultiLineString") return "LineString";
          if (t === "MultiPolygon") return "Polygon";
          return t;
        };
      case "$id":
        return f => f.id;
      default:
        return f => f.properties[key];
    }
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var csscolorparser = createCommonjsModule(function (module, exports) {
  // (c) Dean McNamee <dean@gmail.com>, 2012.
  //
  // https://github.com/deanm/css-color-parser-js
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  // IN THE SOFTWARE.

  // http://www.w3.org/TR/css3-color/
  var kCSSColorTable = {
    "transparent": [0,0,0,0], "aliceblue": [240,248,255,1],
    "antiquewhite": [250,235,215,1], "aqua": [0,255,255,1],
    "aquamarine": [127,255,212,1], "azure": [240,255,255,1],
    "beige": [245,245,220,1], "bisque": [255,228,196,1],
    "black": [0,0,0,1], "blanchedalmond": [255,235,205,1],
    "blue": [0,0,255,1], "blueviolet": [138,43,226,1],
    "brown": [165,42,42,1], "burlywood": [222,184,135,1],
    "cadetblue": [95,158,160,1], "chartreuse": [127,255,0,1],
    "chocolate": [210,105,30,1], "coral": [255,127,80,1],
    "cornflowerblue": [100,149,237,1], "cornsilk": [255,248,220,1],
    "crimson": [220,20,60,1], "cyan": [0,255,255,1],
    "darkblue": [0,0,139,1], "darkcyan": [0,139,139,1],
    "darkgoldenrod": [184,134,11,1], "darkgray": [169,169,169,1],
    "darkgreen": [0,100,0,1], "darkgrey": [169,169,169,1],
    "darkkhaki": [189,183,107,1], "darkmagenta": [139,0,139,1],
    "darkolivegreen": [85,107,47,1], "darkorange": [255,140,0,1],
    "darkorchid": [153,50,204,1], "darkred": [139,0,0,1],
    "darksalmon": [233,150,122,1], "darkseagreen": [143,188,143,1],
    "darkslateblue": [72,61,139,1], "darkslategray": [47,79,79,1],
    "darkslategrey": [47,79,79,1], "darkturquoise": [0,206,209,1],
    "darkviolet": [148,0,211,1], "deeppink": [255,20,147,1],
    "deepskyblue": [0,191,255,1], "dimgray": [105,105,105,1],
    "dimgrey": [105,105,105,1], "dodgerblue": [30,144,255,1],
    "firebrick": [178,34,34,1], "floralwhite": [255,250,240,1],
    "forestgreen": [34,139,34,1], "fuchsia": [255,0,255,1],
    "gainsboro": [220,220,220,1], "ghostwhite": [248,248,255,1],
    "gold": [255,215,0,1], "goldenrod": [218,165,32,1],
    "gray": [128,128,128,1], "green": [0,128,0,1],
    "greenyellow": [173,255,47,1], "grey": [128,128,128,1],
    "honeydew": [240,255,240,1], "hotpink": [255,105,180,1],
    "indianred": [205,92,92,1], "indigo": [75,0,130,1],
    "ivory": [255,255,240,1], "khaki": [240,230,140,1],
    "lavender": [230,230,250,1], "lavenderblush": [255,240,245,1],
    "lawngreen": [124,252,0,1], "lemonchiffon": [255,250,205,1],
    "lightblue": [173,216,230,1], "lightcoral": [240,128,128,1],
    "lightcyan": [224,255,255,1], "lightgoldenrodyellow": [250,250,210,1],
    "lightgray": [211,211,211,1], "lightgreen": [144,238,144,1],
    "lightgrey": [211,211,211,1], "lightpink": [255,182,193,1],
    "lightsalmon": [255,160,122,1], "lightseagreen": [32,178,170,1],
    "lightskyblue": [135,206,250,1], "lightslategray": [119,136,153,1],
    "lightslategrey": [119,136,153,1], "lightsteelblue": [176,196,222,1],
    "lightyellow": [255,255,224,1], "lime": [0,255,0,1],
    "limegreen": [50,205,50,1], "linen": [250,240,230,1],
    "magenta": [255,0,255,1], "maroon": [128,0,0,1],
    "mediumaquamarine": [102,205,170,1], "mediumblue": [0,0,205,1],
    "mediumorchid": [186,85,211,1], "mediumpurple": [147,112,219,1],
    "mediumseagreen": [60,179,113,1], "mediumslateblue": [123,104,238,1],
    "mediumspringgreen": [0,250,154,1], "mediumturquoise": [72,209,204,1],
    "mediumvioletred": [199,21,133,1], "midnightblue": [25,25,112,1],
    "mintcream": [245,255,250,1], "mistyrose": [255,228,225,1],
    "moccasin": [255,228,181,1], "navajowhite": [255,222,173,1],
    "navy": [0,0,128,1], "oldlace": [253,245,230,1],
    "olive": [128,128,0,1], "olivedrab": [107,142,35,1],
    "orange": [255,165,0,1], "orangered": [255,69,0,1],
    "orchid": [218,112,214,1], "palegoldenrod": [238,232,170,1],
    "palegreen": [152,251,152,1], "paleturquoise": [175,238,238,1],
    "palevioletred": [219,112,147,1], "papayawhip": [255,239,213,1],
    "peachpuff": [255,218,185,1], "peru": [205,133,63,1],
    "pink": [255,192,203,1], "plum": [221,160,221,1],
    "powderblue": [176,224,230,1], "purple": [128,0,128,1],
    "rebeccapurple": [102,51,153,1],
    "red": [255,0,0,1], "rosybrown": [188,143,143,1],
    "royalblue": [65,105,225,1], "saddlebrown": [139,69,19,1],
    "salmon": [250,128,114,1], "sandybrown": [244,164,96,1],
    "seagreen": [46,139,87,1], "seashell": [255,245,238,1],
    "sienna": [160,82,45,1], "silver": [192,192,192,1],
    "skyblue": [135,206,235,1], "slateblue": [106,90,205,1],
    "slategray": [112,128,144,1], "slategrey": [112,128,144,1],
    "snow": [255,250,250,1], "springgreen": [0,255,127,1],
    "steelblue": [70,130,180,1], "tan": [210,180,140,1],
    "teal": [0,128,128,1], "thistle": [216,191,216,1],
    "tomato": [255,99,71,1], "turquoise": [64,224,208,1],
    "violet": [238,130,238,1], "wheat": [245,222,179,1],
    "white": [255,255,255,1], "whitesmoke": [245,245,245,1],
    "yellow": [255,255,0,1], "yellowgreen": [154,205,50,1]};

  function clamp_css_byte(i) {  // Clamp to integer 0 .. 255.
    i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
    return i < 0 ? 0 : i > 255 ? 255 : i;
  }

  function clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }

  function parse_css_int(str) {  // int or percentage.
    if (str[str.length - 1] === '%')
      return clamp_css_byte(parseFloat(str) / 100 * 255);
    return clamp_css_byte(parseInt(str));
  }

  function parse_css_float(str) {  // float or percentage.
    if (str[str.length - 1] === '%')
      return clamp_css_float(parseFloat(str) / 100);
    return clamp_css_float(parseFloat(str));
  }

  function css_hue_to_rgb(m1, m2, h) {
    if (h < 0) h += 1;
    else if (h > 1) h -= 1;

    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
    if (h * 2 < 1) return m2;
    if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;
    return m1;
  }

  function parseCSSColor(css_str) {
    // Remove all whitespace, not compliant, but should just be more accepting.
    var str = css_str.replace(/ /g, '').toLowerCase();

    // Color keywords (and transparent) lookup.
    if (str in kCSSColorTable) return kCSSColorTable[str].slice();  // dup.

    // #abc and #abc123 syntax.
    if (str[0] === '#') {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xfff)) return null;  // Covers NaN.
        return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
                (iv & 0xf0) | ((iv & 0xf0) >> 4),
                (iv & 0xf) | ((iv & 0xf) << 4),
                1];
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
        if (!(iv >= 0 && iv <= 0xffffff)) return null;  // Covers NaN.
        return [(iv & 0xff0000) >> 16,
                (iv & 0xff00) >> 8,
                iv & 0xff,
                1];
      }

      return null;
    }

    var op = str.indexOf('('), ep = str.indexOf(')');
    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op+1, ep-(op+1)).split(',');
      var alpha = 1;  // To allow case fallthrough.
      switch (fname) {
        case 'rgba':
          if (params.length !== 4) return null;
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'rgb':
          if (params.length !== 3) return null;
          return [parse_css_int(params[0]),
                  parse_css_int(params[1]),
                  parse_css_int(params[2]),
                  alpha];
        case 'hsla':
          if (params.length !== 4) return null;
          alpha = parse_css_float(params.pop());
          // Fall through.
        case 'hsl':
          if (params.length !== 3) return null;
          var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
          // NOTE(deanm): According to the CSS spec s/l should only be
          // percentages, but we don't bother and let float or percentage.
          var s = parse_css_float(params[1]);
          var l = parse_css_float(params[2]);
          var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
          var m1 = l * 2 - m2;
          return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
                  clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),
                  alpha];
        default:
          return null;
      }
    }

    return null;
  }

  try { exports.parseCSSColor = parseCSSColor; } catch(e) { }
  });
  var csscolorparser_1 = csscolorparser.parseCSSColor;

  function buildInterpFunc(base, sampleVal) {
    // Return a function to interpolate the value of y(x), given endpoints
    // p0 = (x0, y0) and p2 = (x1, y1)

    const scale = getScale(base);
    const interpolate = getInterpolator(sampleVal);

    return (p0, x, p1) => interpolate( p0[1], scale(p0[0], x, p1[0]), p1[1] );
  }

  function getScale(base) {
    // Return a function to find the relative position of x between a and b

    // Exponential scale follows mapbox-gl-js, style-spec/function/index.js
    // NOTE: https://github.com/mapbox/mapbox-gl-js/issues/2698 not addressed!
    const scale = (base === 1)
      ? (a, x, b) => (x - a) / (b - a)  // Linear scale
      : (a, x, b) => (Math.pow(base, x - a) - 1) / (Math.pow(base, b - a) - 1);

    // Add check for zero range
    return (a, x, b) => (a === b)
      ? 0
      : scale(a, x, b);
  }

  function getInterpolator(sampleVal) {
    // Return a function to find an interpolated value between end values v1, v2,
    // given relative position t between the two end positions

    var type = typeof sampleVal;
    if (type === "string" && csscolorparser_1(sampleVal)) type = "color";

    switch (type) {
      case "number": // Linear interpolator
        return (v1, t, v2) => v1 + t * (v2 - v1);

      case "color":  // Interpolate RGBA
        return (v1, t, v2) => 
          interpColor( csscolorparser_1(v1), t, csscolorparser_1(v2) );

      default:       // Assume step function
        return (v1, t, v2) => v1;
    }
  }

  function interpColor(c0, t, c1) {
    // Inputs c0, c1 are 4-element RGBA arrays as returned by parseCSSColor
    let c = c0.map( (c0_i, i) => c0_i + t * (c1[i] - c0_i) );

    return "rgba(" +
      Math.round(c[0]) + ", " +
      Math.round(c[1]) + ", " + 
      Math.round(c[2]) + ", " +
      c[3] + ")";
  }

  function autoGetters(properties = {}, defaults) {
    const getters = {};
    Object.keys(defaults).forEach(key => {
      getters[key] = buildStyleFunc(properties[key], defaults[key]);
    });
    return getters;
  }

  function buildStyleFunc(style, defaultVal) {
    var styleFunc, getArg;

    if (style === undefined) {
      styleFunc = () => defaultVal;
      styleFunc.type = "constant";

    } else if (typeof style !== "object" || Array.isArray(style)) {
      styleFunc = () => style;
      styleFunc.type = "constant";

    } else if (!style.property || style.property === "zoom") {
      getArg = (zoom, feature) => zoom;
      styleFunc = getStyleFunc(style, getArg);
      styleFunc.type = "zoom";

    } else {
      getArg = (zoom, feature) => feature.properties[style.property];
      styleFunc = getStyleFunc(style, getArg);
      styleFunc.type = "property";

    } // NOT IMPLEMENTED: zoom-and-property functions

    return styleFunc;
  }

  function getStyleFunc(style, getArg) {
    if (style.type === "identity") return getArg;

    // We should be building a stop function now. Make sure we have enough info
    var stops = style.stops;
    if (!stops || stops.length < 2 || stops[0].length !== 2) {
      console.log("buildStyleFunc: style = " + JSON.stringify(style));
      console.log("ERROR in buildStyleFunc: failed to understand style!");
      return;
    }

    var stopFunc = buildStopFunc(stops, style.base);
    return (zoom, feature) => stopFunc( getArg(zoom, feature) );
  }

  function buildStopFunc(stops, base = 1) {
    const izm = stops.length - 1;
    const interpolateVal = buildInterpFunc(base, stops[0][1]);

    return function(x) {
      let iz = stops.findIndex(stop => stop[0] > x);

      if (iz === 0) return stops[0][1]; // x is below first stop
      if (iz < 0) return stops[izm][1]; // x is above last stop

      return interpolateVal(stops[iz-1], x, stops[iz]);
    }
  }

  const layoutDefaults = {
    "background": {
      "visibility": "visible",
    },
    "fill": {
      "visibility": "visible",
    },
    "line": {
      "visibility": "visible",
      "line-cap": "butt",
      "line-join": "miter",
      "line-miter-limit": 2,
      "line-round-limit": 1.05,
    },
    "symbol": {
      "visibility": "visible",

      "symbol-placement": "point",
      "symbol-spacing": 250,
      "symbol-avoid-edges": false,
      "symbol-sort-key": undefined,
      "symbol-z-order": "auto",

      "icon-allow-overlap": false,
      "icon-ignore-placement": false,
      "icon-optional": false,
      "icon-rotation-alignment": "auto",
      "icon-size": 1,
      "icon-text-fit": "none",
      "icon-text-fit-padding": [0, 0, 0, 0],
      "icon-image": undefined,
      "icon-rotate": 0,
      "icon-padding": 2,
      "icon-keep-upright": false,
      "icon-offset": [0, 0],
      "icon-anchor": "center",
      "icon-pitch-alignment": "auto",

      "text-pitch-alignment": "auto",
      "text-rotation-alignment": "auto",
      "text-field": "",
      "text-font": ["Open Sans Regular", "Arial Unicode MS Regular"],
      "text-size": 16,
      "text-max-width": 10,
      "text-line-height": 1.2,
      "text-letter-spacing": 0,
      "text-justify": "center",
      "text-radial-offset": 0,
      "text-variable-anchor": undefined,
      "text-anchor": "center",
      "text-max-angle": 45,
      "text-rotate": 0,
      "text-padding": 2.0,
      "text-keep-upright": true,
      "text-transform": "none",
      "text-offset": [0, 0],
      "text-allow-overlap": false,
      "text-ignore-placement": false,
      "text-optional": false,
    },
    "raster": {
      "visibility": "visible",
    },
    "circle": {
      "visibility": "visible",
    },
    "fill-extrusion": {
      "visibility": "visible",
    },
    "heatmap": {
      "visibility": "visible",
    },
    "hillshade": {
      "visibility": "visible",
    },
  };

  const paintDefaults = {
    "background": {
      "background-color": "#000000",
      "background-opacity": 1,
      "background-pattern": undefined,
    },
    "fill": {
      "fill-antialias": true,
      "fill-opacity": 1,
      "fill-color": "#000000",
      "fill-outline-color": undefined,
      "fill-outline-width": 1, // non-standard!
      "fill-translate": [0, 0],
      "fill-translate-anchor": "map",
      "fill-pattern": undefined,
    },
    "line": {
      "line-opacity": 1,
      "line-color": "#000000",
      "line-translate": [0, 0],
      "line-translate-anchor": "map",
      "line-width": 1,
      "line-gap-width": 0,
      "line-offset": 0,
      "line-blur": 0,
      "line-dasharray": undefined,
      "line-pattern": undefined,
      "line-gradient": undefined,
    },
    "symbol": {
      "icon-opacity": 1,
      "icon-color": "#000000",
      "icon-halo-color": "rgba(0, 0, 0, 0)",
      "icon-halo-width": 0,
      "icon-halo-blur": 0,
      "icon-translate": [0, 0],
      "icon-translate-anchor": "map",

      "text-opacity": 1,
      "text-color": "#000000",
      "text-halo-color": "rgba(0, 0, 0, 0)",
      "text-halo-width": 0,
      "text-halo-blur": 0,
      "text-translate": [0, 0],
      "text-translate-anchor": "map",
    },
    "raster": {
      "raster-opacity": 1,
      "raster-hue-rotate": 0,
      "raster-brighness-min": 0,
      "raster-brightness-max": 1,
      "raster-saturation": 0,
      "raster-contrast": 0,
      "raster-resampling": "linear",
      "raster-fade-duration": 300,
    },
    "circle": {
      "circle-radius": 5,
      "circle-color": "#000000",
      "circle-blur": 0,
      "circle-opacity": 1,
      "circle-translate": [0, 0],
      "circle-translate-anchor": "map",
      "circle-pitch-scale": "map",
      "circle-pitch-alignment": "viewport",
      "circle-stroke-width": 0,
      "circle-stroke-color": "#000000",
      "circle-stroke-opacity": 1,
    },
    "fill-extrusion": {
      "fill-extrusion-opacity": 1,
      "fill-extrusion-color": "#000000",
      "fill-extrusion-translate": [0, 0],
      "fill-extrusion-translate-anchor": "map",
      "fill-extrusion-height": 0,
      "fill-extrusion-base": 0,
      "fill-extrusion-vertical-gradient": true,
    },
    "heatmap": {
      "heatmap-radius": 30,
      "heatmap-weight": 1,
      "heatmap-intensity": 1,
      "heatmap-color": ["interpolate",["linear"],["heatmap-density"],0,"rgba(0, 0, 255,0)",0.1,"royalblue",0.3,"cyan",0.5,"lime",0.7,"yellow",1,"red"],
      "heatmap-opacity": 1,
    },
    "hillshade": {
      "hillshade-illumination-direction": 335,
      "hillshade-illumination-anchor": "viewport",
      "hillshade-exaggeration": 0.5,
      "hillshade-shadow-color": "#000000",
      "hillshade-highlight-color": "#FFFFFF",
      "hillshade-accent-color": "#000000",
    },
  };

  function parseLayer(inputLayer) {
    // Make a shallow copy of the layer, to leave the input unchanged
    const layer = Object.assign({}, inputLayer);

    // Replace filter and rendering properties with functions
    layer.filter = buildFeatureFilter(layer.filter);
    layer.layout = autoGetters(layer.layout, layoutDefaults[layer.type]);
    layer.paint  = autoGetters(layer.paint,  paintDefaults[layer.type] );

    return layer;
  }

  function parseStyle(style, mapboxToken) {
    // Get a Promise that resolves to a raw Mapbox style document
    const getStyleJson = (typeof style === "object")
      ? Promise.resolve(style)                // style is JSON already
      : getJSON( expandStyleURL(style, mapboxToken) ); // Get from URL

    // Set up an asynchronous function to process the document
    function parseStyleJson(rawStyleDoc) {
      // Make a shallow copy of the document, to leave the input unchanged
      const styleDoc = Object.assign({}, rawStyleDoc);

      // Expand layer references, then parse
      styleDoc.layers = derefLayers(styleDoc.layers).map(parseLayer);

      // Get linked info for sources and sprites
      const sourcePromise = expandSources(styleDoc.sources, mapboxToken);
      const spritePromise = loadSprite(styleDoc.sprite, mapboxToken);

      return Promise.all([sourcePromise, spritePromise])
        .then( ([sources, spriteData]) => {
          styleDoc.sources = sources;
          styleDoc.spriteData = spriteData;
          return styleDoc;
        });
    }

    // Chain together and return
    return getStyleJson.then( parseStyleJson );
  }

  function expandSources(rawSources, token) {
    const expandPromises = Object.entries(rawSources).map(expandSource);

    function expandSource([key, rawSource]) {
      // Make a shallow copy of the input. Note: some properties may still be
      // pointing back to the original style document, like .vector_layers,
      // .bounds, .center, .extent
      const source = Object.assign({}, rawSource);

      if (source.url === undefined) return [key, source]; // No change

      // Load the referenced TileJSON document, and copy its values to source
      return getJSON( expandTileURL(source.url, token) )
        .then( tileJson => [key, Object.assign(source, tileJson)] );
    }

    function combineSources(keySourcePairs) {
      const sources = {};
      keySourcePairs.forEach( ([key, val]) => { sources[key] = val; } );
      return sources;
    }

    return Promise.all( expandPromises ).then( combineSources );
  }

  function loadSprite(sprite, token) {
    if (!sprite) return;

    const urls = expandSpriteURLs(sprite, token);

    return Promise.all([getImage(urls.image), getJSON(urls.meta)])
      .then( ([image, meta]) => ({ image, meta }) );
  }

  // Renders layers that cover the whole tile (like painting with a roller)

  function initBackgroundFill(layout, paint, canvSize) {
    return function(ctx, zoom) {
      ctx.fillStyle = paint["background-color"](zoom);
      ctx.globalAlpha = paint["background-opacity"](zoom);
      ctx.fillRect(0, 0, canvSize, canvSize);
    }
  }

  function initRasterFill(layout, paint, canvSize) {
    return function(ctx, zoom, image) {
      ctx.globalAlpha = paint["raster-opacity"](zoom);
      // TODO: we are forcing one tile to cover the canvas!
      // In some cases (e.g. Mapbox Satellite Streets) the raster tiles may
      // be half the size of the vector canvas, so we need 4 of them...
      ctx.drawImage(image, 0, 0, canvSize, canvSize);
    }
  }

  function pointPath(path, point) {
    // Draws a Point geometry, which is an array of two coordinates
    path.moveTo(point[0], point[1]);
    path.lineTo(point[0], point[1]);
  }

  function linePath(path, points) {
    // Draws a LineString geometry, which is an array of Points.
    var p = points[0], i = 0, n = points.length;
    path.moveTo(p[0], p[1]);
    while (++i < n) p = points[i], path.lineTo(p[0], p[1]);
  }

  function polygonPath(path, lines) {
    // Draws a Polygon geometry, which is an array of LineStrings
    var i = -1, n = lines.length;
    while (++i < n) linePath(path, lines[i]);
  }

  const pathFuncs = {
    Point: pointPath,
    LineString: linePath,
    Polygon: polygonPath,
  };

  function geomToPath(geometry) {
    // Converts a GeoJSON Feature geometry to a Path2D object

    var type = geometry.type;
    var isMulti = type.substring(0, 5) === "Multi";
    if (isMulti) type = type.substring(5);

    const pathFunc = pathFuncs[type];

    const path = new Path2D();

    const coords = geometry.coordinates;
    if (isMulti) {
      // While loops faster than forEach: https://jsperf.com/loops/32
      var i = -1, n = coords.length;
      while (++i < n) pathFunc(path, coords[i]);

    } else {
      pathFunc(path, coords);
    }

    return path;
  }

  function canv(property) {
    // Create a default state setter for a Canvas 2D renderer
    return (val, ctx) => { ctx[property] = val; };
  }

  function pair(getStyle, setState) {
    // Return a style value getter and a renderer state setter as a paired object
    return { getStyle, setState };
  }

  function initBrush({ setters, methods }) {
    const dataFuncs = setters.filter(s => s.getStyle.type === "property");
    const zoomFuncs = setters.filter(s => s.getStyle.type !== "property");

    return function(ctx, zoom, data) {
      // Set the non-data-dependent context state
      zoomFuncs.forEach(f => f.setState(f.getStyle(zoom), ctx));

      // Loop over features and draw
      data.features.forEach(feature => drawFeature(ctx, zoom, feature));
    }

    function drawFeature(ctx, zoom, feature) {
      // Set data-dependent context state
      dataFuncs.forEach(f => f.setState(f.getStyle(zoom, feature), ctx));

      // Construct Path and draw
      //let path = geomToPath(feature.geometry); // TODO: move to data prep
      let path = feature.geometry.path;
      methods.forEach(method => ctx[method](path));
    }
  }

  function makePatternSetter(sprite) {
    return function(spriteID, ctx) {
      const sMeta = sprite.meta[spriteID];
      const patternCanvas = document.createElement("canvas");
      patternCanvas.width = sMeta.width;
      patternCanvas.height = sMeta.height;
      const pCtx = patternCanvas.getContext("2d");
      pCtx.drawImage(
        sprite.image, 
        sMeta.x, 
        sMeta.y, 
        sMeta.width, 
        sMeta.height,
        0,
        0,
        sMeta.width,
        sMeta.height
      );
      ctx.fillStyle = ctx.createPattern(patternCanvas, "repeat");
    };
  }

  // Renders discrete lines, points, polygons... like painting with a brush

  function initCircle(layout, paint) {
    const setRadius = (radius, ctx) => ctx.lineWidth = radius * 2;
    const setters = [
      pair(paint["circle-radius"],  setRadius),
      pair(paint["circle-color"],   canv("strokeStyle")),
      pair(paint["circle-opacity"], canv("globalAlpha")),
      pair(() => "round",           canv("lineCap")),
    ];
    const methods = ["stroke"];

    return initBrush({ setters, methods });
  }

  function initLine(layout, paint) {
    const setters = [
      pair(layout["line-cap"],      canv("lineCap")),
      pair(layout["line-join"],     canv("lineJoin")),
      pair(layout["line-miter-limit"], canv("miterLimit")),
      // line-round-limit,

      pair(paint["line-width"],     canv("lineWidth")),
      pair(paint["line-opacity"],   canv("globalAlpha")),
      pair(paint["line-color"],     canv("strokeStyle")),
      // line-gap-width, 
      // line-translate, line-translate-anchor,
      // line-offset, line-blur, line-gradient, line-pattern, 
      // line-dasharray
    ];
    const methods = ["stroke"];

    return initBrush({ setters, methods });
  }

  function initFill(layout, paint, sprite) {
    var getStyle, setState;

    let pattern = paint["fill-pattern"];
    if (pattern.type !== "constant" || pattern() !== undefined) {
      // Fill with a repeated sprite. Style getter returns sprite name
      getStyle = pattern;
      setState = makePatternSetter(sprite);
    } else {
      // Fill with a solid color
      getStyle = paint["fill-color"];
      setState = canv("fillStyle");
    }

    const setters = [
      pair(getStyle, setState),
      pair(paint["fill-opacity"],   canv("globalAlpha")),
      // fill-translate, 
      // fill-translate-anchor,
    ];
    const methods = ["fill"];

    let outline = paint["fill-outline-color"];
    if (outline.type !== "constant" || outline() !== undefined) {
      setters.push(
        pair(paint["fill-outline-color"], canv("strokeStyle")),
        pair(paint["fill-outline-width"], canv("lineWidth")), // nonstandard
      );
      methods.push("stroke");
    }

    return initBrush({ setters, methods });
  }

  // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Common_weight_name_mapping
  // Some obscure names from https://css3-tutorial.net/text-font/font-weight/
  // But the 2 sources conflict!! The mapping is not standardized!
  const fontWeights = {
    "thin": 100,
    "hairline": 100,
    "extra-light": 200,
    "ultra-light": 200,
    "light": 300,
    "book": 300,
    "regular": 400,
    "normal": 400,
    "plain": 400,
    "roman": 400,
    "standard": 400,
    "medium": 500,
    "semi-bold": 600,
    "demi-bold": 600,
    "bold": 700,
    "extra-bold": 800,
    "ultra-bold": 800,
    "heavy": 900,
    "black": 900,
    "fat": 900,
    "poster": 900,
    "ultra-black": 950,
    "extra-black": 950,
    "heavy-black": 950,
  };
  const wNames = Object.keys(fontWeights);

  function popFontWeight(words, defaultWeight) {
    // Input words is an array of words from a font descriptor string, 
    // where the last word (or two) may contain font-weight info. 
    // Returns a numeric font-weight (if found), or defaultWeight
    // NOTES
    //  - ASSUMES font-style info (italics) has already been removed.
    //  - Input words array may be shortened!

    // If the last word is already a numeric weight, just remove and return it
    if (typeof words.slice(-1)[0] === "number") return words.pop();

    // Check if the last word matches one of the weight names in the dictionary
    var test = words.slice(-1)[0].toLowerCase();
    let wName = wNames.find(w => w == test || w.replace("-", "") == test);
    if (wName) {
      words.pop();
      return fontWeights[wName];
    }

    // Try again with the last 2 words
    test = words.slice(-2).join(" ").toLowerCase();
    wName = wNames.find(w => w.replace("-", " ") == test);
    if (wName) {
      words.pop();
      words.pop();
    }
    return fontWeights[wName] || defaultWeight;
  }

  const italicRE = /(italic|oblique)$/i;
  const fontCache = {};

  function getFontString(fonts, size, lineHeight) {
    // TODO: Need to pre-load all needed fonts, using FontFace API
    if (!Array.isArray(fonts)) fonts = [fonts];

    // Check if we already calculated the CSS for this font
    var cssData = fontCache[fonts.join(",")];
    if (cssData) return combine(cssData, size, lineHeight);

    var weight = 400;
    var style = 'normal';
    var fontFamilies = [];
    fonts.forEach(font => {
      var parts = font.split(' ');

      // Get font-style from end of string
      var maybeStyle = parts[parts.length - 1].toLowerCase();
      if (["normal", "italic", "oblique"].includes(maybeStyle)) {
        style = maybeStyle;
        parts.pop();
      } else if (italicRE.test(maybeStyle)) {
        // Style is part of the last word. Separate the parts
        // NOTE: haven't seen an example of this?
        // Idea from the mapbox-to-css module on NPM
        style = italicRE.exec(maybeStyle)[0];
        parts[parts.length - 1].replace(italicRE, '');
      }

      // Get font-weight
      weight = popFontWeight(parts, weight);

      // Get font-family
      // Special handling for Noto Sans, from mapbox-to-css module on NPM
      var fontFamily = parts.join(" ")
        .replace('Klokantech Noto Sans', 'Noto Sans');
      if (fontFamily.indexOf(" ") !== -1) { // Multi-word string. Wrap it in quotes
        fontFamily = '"' + fontFamily + '"';
      }
      fontFamilies.push(fontFamily);
    });

    fontFamilies.push("sans-serif"); // Last resort fallback

    // CSS font property: font-style font-weight font-size/line-height font-family
    cssData = fontCache[fonts.join(",")] = [style, weight, fontFamilies];

    return combine(cssData, size, lineHeight);
  }
  function combine(cssData, size, lineHeight) {
    // Round fontSize to the nearest 0.1 pixel
    size = Math.round(10.0 * size) * 0.1;

    // Combine with line height
    let sizes = (lineHeight) 
      ? size + "px/" + lineHeight 
      : size + "px";

    return [cssData[0], cssData[1], sizes, cssData[2]].join(" ");
  }

  function getTextShift(anchor) {
    // We use the Canvas 2D settings 
    //  textBaseline = "bottom", textAlign = "left"
    // and shift the text box based on the specified "text-anchor"
    // Returned values will be scaled by the text box dimensions
    switch (anchor) {
      case "top-left":
        return [ 0.0, 1.0];
      case "top-right":
        return [-1.0, 1.0];
      case "top":
        return [-0.5, 1.0];
      case "bottom-left":
        return [ 0.0, 0.0];
      case "bottom-right":
        return [-1.0, 0.0];
      case "bottom":
        return [-0.5, 0.0];
      case "left":
        return [ 0.0, 0.5];
      case "right":
        return [-1.0, 0.5];
      case "center":
      default:
        return [-0.5, 0.5];
    }
  }

  function initTextLabeler(ctx, zoom, layout, paint) {
    const fontSize = layout["text-size"](zoom);
    const fontFace = layout["text-font"](zoom);
    const lineHeight = layout["text-line-height"](zoom);
    ctx.font = getFontString(fontFace, fontSize, lineHeight);

    const textPadding = layout["text-padding"](zoom);
    const textOffset = layout["text-offset"](zoom);

    ctx.textBaseline = "bottom";
    ctx.textAlign = "left";
    const posShift = getTextShift( layout["text-anchor"](zoom) );

    const haloWidth = paint["text-halo-width"](zoom);
    if (haloWidth > 0) {
      ctx.lineWidth = haloWidth * 2.0;
      ctx.lineJoin = "round";
      ctx.strokeStyle = paint["text-halo-color"](zoom);
    }
    ctx.fillStyle = paint["text-color"](zoom);

    var labelText, labelLength, labelHeight, x, y;

    return { measure, draw };

    function measure(feature) {
      labelText = feature.properties.labelText;
      if (!labelText) return;

      // TODO: ctx.measureText is slow!! Need to pre-compute in data prep
      labelLength = ctx.measureText(labelText).width;
      labelHeight = fontSize * lineHeight;

      var coords = feature.geometry.coordinates;
      // Compute coordinates of bottom left corner of text
      x = coords[0] + textOffset[0] * fontSize + posShift[0] * labelLength;
      y = coords[1] + textOffset[1] * labelHeight + posShift[1] * labelHeight;

      // Return a bounding box object
      return [
        [x - textPadding, y - labelHeight - textPadding],
        [x + labelLength + textPadding, y + textPadding]
      ];
    }

    function draw() {
      if (!labelText) return;

      if (haloWidth > 0) ctx.strokeText(labelText, x, y);
      ctx.fillText(labelText, x, y);
    }
  }

  function initIconLabeler(ctx, zoom, layout, paint, sprite) {
    const iconPadding = layout["icon-padding"](zoom);

    var spriteID, spriteMeta, x, y;

    return { measure, draw };

    function measure(feature) {
      spriteID = feature.properties.spriteID;
      if (!spriteID) return;

      spriteMeta = sprite.meta[spriteID];

      var coords = feature.geometry.coordinates;
      x = Math.round(coords[0] - spriteMeta.width / 2);
      y = Math.round(coords[1] - spriteMeta.height / 2);

      return [
        [x - iconPadding, y - iconPadding],
        [x + spriteMeta.width + iconPadding, y + spriteMeta.height + iconPadding]
      ];
    } 

    function draw() {
      if (!spriteID) return;

      ctx.drawImage(
        sprite.image,
        spriteMeta.x,
        spriteMeta.y,
        spriteMeta.width,
        spriteMeta.height,
        x,
        y,
        spriteMeta.width,
        spriteMeta.height
      );
    }
  }

  function initLabeler(layout, paint, sprite, canvasSize) {
    // Skip unsupported symbol types
    if (layout["symbol-placement"]() === "line") return () => undefined;

    const tileBox = [[0, 0], [canvasSize, canvasSize]];

    return function(ctx, zoom, data, boxes) {
      const textLabeler = initTextLabeler(ctx, zoom, layout, paint);
      const iconLabeler = initIconLabeler(ctx, zoom, layout, paint, sprite);

      data.features.forEach(drawLabel);

      function drawLabel(feature) {
        var textBox = textLabeler.measure(feature);
        if ( collides(textBox) ) return;

        var iconBox = iconLabeler.measure(feature);
        if ( collides(iconBox) ) return;

        // Draw the labels, IF they are inside the tile
        if ( iconBox && intersects(tileBox, iconBox) ) {
          iconLabeler.draw();
          boxes.push(iconBox);
        }
        if ( textBox && intersects(tileBox, textBox) ) {
          textLabeler.draw();
          boxes.push(textBox);
        }
      }

      function collides(newBox) {
        if (!newBox) return false;
        return boxes.some( box => intersects(box, newBox) );
      }
    }
  }

  function intersects(box1, box2) {
    // box[0] = [xmin, ymin]; box[1] = [xmax, ymax]
    if (box1[0][0] > box2[1][0]) return false;
    if (box2[0][0] > box1[1][0]) return false;
    if (box1[0][1] > box2[1][1]) return false;
    if (box2[0][1] > box1[1][1]) return false;

    return true;
  }

  function getPainter(style, sprite, canvasSize) {
    const painter = makePaintFunction(style, sprite, canvasSize);

    return function(context, zoom, data, boundingBoxes) {
      if (!data) return false;
      if (style.layout.visibility() === "none") return false;

      // Save the initial context state, and restore it after rendering
      context.save();
      painter(context, zoom, data, boundingBoxes);
      context.restore();

      return true; // return value indicates whether canvas has changed
    };
  }

  function makePaintFunction(style, sprite, canvasSize) {
    switch (style.type) {
      case "background":
        return initBackgroundFill(style.layout, style.paint, canvasSize);
      case "raster":
        return initRasterFill(style.layout, style.paint, canvasSize);
      case "symbol":
        return initLabeler(style.layout, style.paint, sprite, canvasSize);
      case "circle":
        return initCircle(style.layout, style.paint);
      case "line":
        return initLine(style.layout, style.paint);
      case "fill":
        return initFill(style.layout, style.paint, sprite);
      case "fill-extrusion":
      case "heatmap":
      case "hillshade":
      default:
        return console.log("ERROR in initRenderer: layer.type = " +
          style.type + " not supported!");
    }
  }

  function initPathGetter(style) {
    // Find the names of the feature properties that affect rendering
    const renderProps = Object.values(style.layout)
      .concat(Object.values(style.paint))
      .filter(styleFunc => styleFunc.type === "property")
      .map(styleFunc => styleFunc.property);

    //return (renderProps.length > 0)
    const grouper = (renderProps.length > 0)
      ? (features) => groupFeatures(features, trimProps)
      : combineFeatures;

    return function(features) {
      const grouped = grouper(features);
      grouped.forEach(feature => {
        feature.geometry.path = geomToPath(feature.geometry);
      });
      return grouped;
    }

    function trimProps(properties) {
      let trimmed = {};
      renderProps.forEach(key => {
        trimmed[key] = properties[key];
      });
      return trimmed;
    }
  }

  function groupFeatures(features, selectProperties) {
    // Group features that will be styled the same
    const groups = {};
    features.forEach(feature => {
      // Keep only the properties relevant to rendering
      let properties = selectProperties(feature.properties);

      // Look up the appropriate group, or create it if it doesn't exist
      let key = Object.entries(properties).join();
      if (!groups[key]) groups[key] = initFeature(feature, properties);

      // Add this feature's coordinates to the grouped feature
      addCoords(groups[key].geometry.coordinates, feature.geometry);
    });

    return Object.values(groups).map(checkType);
  }

  function combineFeatures(features) {
    var group = initFeature(features[0]);
    features.forEach(f => addCoords(group.geometry.coordinates, f.geometry));
    return [ checkType(group) ];
  }

  function initFeature(template, properties) {
    var type = template.geometry.type;
    return {
      type: "Feature",
      geometry: { type, coordinates: [] },
      properties: properties,
    };
  }

  function addCoords(coords, geom) {
    if (geom.type.substring(0, 5) === "Multi") {
      geom.coordinates.forEach(coord => coords.push(coord));
    } else {
      coords.push(geom.coordinates);
    }
  }

  function checkType(feature) {
    // Check if we have a Multi-* geometry, and make sure it is labeled correctly
    let geom = feature.geometry;
    let labeledMulti = geom.type.substring(0, 5) === "Multi";

    if (geom.coordinates.length < 2) {  // Not Multi
      geom.coordinates = geom.coordinates[0];
      if (labeledMulti) geom.type = geom.type.substring(5);

    } else if (!labeledMulti) {
      geom.type = "Multi" + geom.type;
    }

    return feature;
  }

  function getTokenParser(tokenText) {
    if (!tokenText) return () => undefined;
    const tokenPattern = /{([^{}]+)}/g;

    // We break tokenText into pieces that are either plain text or tokens,
    // then construct an array of functions to parse each piece
    var tokenFuncs = [];
    var charIndex  = 0;
    while (charIndex < tokenText.length) {
      // Find the next token
      let result = tokenPattern.exec(tokenText);

      if (!result) {
        // No tokens left. Parse the plain text after the last token
        let str = tokenText.substring(charIndex);
        tokenFuncs.push(props => str);
        break;
      } else if (result.index > charIndex) {
        // There is some plain text before the token
        let str = tokenText.substring(charIndex, result.index);
        tokenFuncs.push(props => str);
      }

      // Add a function to process the current token
      let token = result[1];
      tokenFuncs.push(props => props[token]);
      charIndex = tokenPattern.lastIndex;
    }
    
    // We now have an array of functions returning either a text string or
    // a feature property
    // Return a function that assembles everything
    return function(properties) {
      return tokenFuncs.reduce(concat, "");
      function concat(str, tokenFunc) {
        let text = tokenFunc(properties) || "";
        return str += text;
      }
    };
  }

  function initLabelGetter(style) {
    const layout = style.layout;

    return function(features, zoom) {
      const getSpriteID = getTokenParser( layout["icon-image"](zoom) );
      const parseText = getTokenParser( layout["text-field"](zoom) );
      const transformText = getTextTransform( layout["text-transform"](zoom) );

      function getProps(properties) {
        var spriteID = getSpriteID(properties);
        var labelText = parseText(properties);
        if (labelText) labelText = transformText(labelText);
        return { spriteID, labelText };
      }

      return features.map( f => initLabel(f.geometry, getProps(f.properties)) );
    }
  }

  function initLabel(geometry, properties) {
    return { type: "Feature", geometry, properties };
  }

  function getTextTransform(code) {
    switch (code) {
      case "uppercase":
        return f => f.toUpperCase();
      case "lowercase":
        return f => f.toLowerCase();
      case "none":
      default:
        return f => f;
    }
  }

  function makeDataGetter(style) {
    // Background layers don't need data
    if (style.type === "background") return () => true;

    const minzoom = style.minzoom || 0;
    const maxzoom = style.maxzoom || 99; // NOTE: doesn't allow maxzoom = 0

    // Raster layers don't need any data processing
    if (style.type === "raster") return function(source, zoom) {
      if (zoom < minzoom || maxzoom < zoom) return false;
      return source;
    }

    const layerName = style["source-layer"];
    const filter = style.filter;

    const processFeatures = (style.type === "symbol") 
      ? initLabelGetter(style)
      : initPathGetter(style);

    return function(source, zoom) {
      if (!source) return false;
      if (zoom < minzoom || maxzoom < zoom) return false;

      let layer = source[layerName];
      if (!layer) return false;

      let features = layer.features.filter(filter);
      if (features.length < 1) return false;

      features = processFeatures(features, zoom);
      return { type: "FeatureCollection", features };
    };
  }

  function initPainter(params) {
    const style = params.styleLayer;
    const sprite = params.spriteObject;
    const canvasSize = params.canvasSize || 512;

    // Define data prep and rendering functions
    const sourceName = style["source"];
    const getData = makeDataGetter(style);
    const painter = getPainter(style, sprite, canvasSize);

    // Compose into one function
    return function(context, zoom, sources, boundingBoxes) {
      let t0 = performance.now();
      let data = getData(sources[sourceName], zoom);
      let t1 = performance.now();

      painter(context, zoom, data, boundingBoxes);

      return t1 - t0; // getData time
    }
  }

  function addPainters(styleDoc, canvasSize = 512) {
    // Add a painter function to every layer in the style document
    styleDoc.layers.forEach(layer => {
      layer.painter = initPainter({
        canvasSize: canvasSize,
        styleLayer: layer,
        spriteObject: styleDoc.spriteData,
      });
    });

    return styleDoc; // NOTE: Modified in place!
  }

  function xhrPromise(href, type) {
    // Wrap XMLHttpRequest to return a Promise

    const req = new XMLHttpRequest();
    req.responseType = type;

    return new Promise( (resolve, reject) => {
      req.onerror = req.onabort = function(e) {
        let err = "XMLHttpRequest ended with an " + e.type;
        return reject(err);
      };

      req.onload = function(e) {
        if (req.responseType !== type) {
          let err = "XMLHttpRequest: Wrong responseType. Expected " +
            type + ", got " + req.responseType;
          return reject(err);
        } else if (req.status !== 200) {
          let err = "XMLHttpRequest: HTTP " + req.status + " error from " + href;
          return reject(err);
        }
        return resolve(req.response);
      };

      req.open('get', href);
      req.send();
    });
  }

  function classifyRings(rings) {
    // Classifies an array of rings into polygons with outer rings and holes
    if (rings.length <= 1) return [rings];

    var polygons = [];
    var polygon, ccw;

    rings.forEach(ring => {
      let area = signedArea(ring);
      if (area === 0) return;

      if (ccw === undefined) ccw = area < 0;

      if (ccw === area < 0) {
        if (polygon) polygons.push(polygon);
        polygon = [ring];

      } else {
        polygon.push(ring);
      }
    });
    if (polygon) polygons.push(polygon);

    return polygons;
  }

  function signedArea(ring) {
    const xmul = (p1, p2) => (p2.x - p1.x) * (p1.y + p2.y);

    const initialValue = xmul(ring[0], ring[ring.length - 1]);

    return ring.slice(1)  // NOTE: skips ring[0], shifts index
      .reduce( (sum, p1, i) => sum + xmul(p1, ring[i]), initialValue );
  }

  function VectorTileFeature(pbf, end, extent, keys, values) {
    // Public
    this.properties = {};
    this.extent = extent;
    this.type = 0;

    // Private
    this._pbf = pbf;
    this._geometry = -1;
    this._keys = keys;
    this._values = values;

    pbf.readFields(readFeature, this, end);
  }

  function readFeature(tag, feature, pbf) {
    if (tag == 1) feature.id = pbf.readVarint();
    else if (tag == 2) readTag(pbf, feature);
    else if (tag == 3) feature.type = pbf.readVarint();
    else if (tag == 4) feature._geometry = pbf.pos;
  }

  function readTag(pbf, feature) {
    var end = pbf.readVarint() + pbf.pos;

    while (pbf.pos < end) {
      var key = feature._keys[pbf.readVarint()],
        value = feature._values[pbf.readVarint()];
      feature.properties[key] = value;
    }
  }

  VectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];

  VectorTileFeature.prototype.loadGeometry = function() {
    var pbf = this._pbf;
    pbf.pos = this._geometry;

    var end = pbf.readVarint() + pbf.pos,
      cmd = 1,
      length = 0,
      x = 0,
      y = 0,
      lines = [],
      line;

    while (pbf.pos < end) {
      if (length <= 0) {
        var cmdLen = pbf.readVarint();
        cmd = cmdLen & 0x7;
        length = cmdLen >> 3;
      }

      length--;

      if (cmd === 1 || cmd === 2) {
        x += pbf.readSVarint();
        y += pbf.readSVarint();

        if (cmd === 1) { // moveTo
          if (line) lines.push(line);
          line = [];
        }

        line.push({ x, y });

      } else if (cmd === 7) {
        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90
        if (line) line.push({ // closePolygon
          x: line[0].x,
          y: line[0].y
        });

      } else {
        throw new Error('unknown command ' + cmd);
      }
    }

    if (line) lines.push(line);

    return lines;
  };

  VectorTileFeature.prototype.bbox = function() {
    var pbf = this._pbf;
    pbf.pos = this._geometry;

    var end = pbf.readVarint() + pbf.pos,
    cmd = 1,
    length = 0,
    x = 0,
    y = 0,
    x1 = Infinity,
    x2 = -Infinity,
    y1 = Infinity,
    y2 = -Infinity;

    while (pbf.pos < end) {
      if (length <= 0) {
        var cmdLen = pbf.readVarint();
        cmd = cmdLen & 0x7;
        length = cmdLen >> 3;
      }

      length--;

      if (cmd === 1 || cmd === 2) {
        x += pbf.readSVarint();
        y += pbf.readSVarint();
        if (x < x1) x1 = x;
        if (x > x2) x2 = x;
        if (y < y1) y1 = y;
        if (y > y2) y2 = y;

      } else if (cmd !== 7) {
        throw new Error('unknown command ' + cmd);
      }
    }

    return [x1, y1, x2, y2];
  };

  VectorTileFeature.prototype.toGeoJSON = function(size, sx = 0, sy = 0) {
    // Input size is the side length of the (square) area over which the
    //  coordinate space of this tile [0, this.extent] will be rendered.
    // Input sx, sy is the origin (top left corner) of the output coordinates
    //  within the (size x size) rendered area of the full tile.

    var scale = size / this.extent,
      coords = this.loadGeometry(),
      type = VectorTileFeature.types[this.type];

    function project(line) {
      return line.map(p => [p.x * scale - sx, p.y * scale - sy]);
    }

    switch (type) {
      case "Point":
        coords = project( coords.map(p => p[0]) );
        break;

      case "LineString":
        coords = coords.map(project);
        break;

      case "Polygon":
        coords = classifyRings(coords);
        coords = coords.map(polygon => polygon.map(project));
        break;
    }

    if (coords.length === 1) {
      coords = coords[0];
    } else {
      type = 'Multi' + type;
    }

    var result = {
      type: "Feature",
      geometry: {
        type: type,
        coordinates: coords
      },
      properties: this.properties
    };

    if ('id' in this) result.id = this.id;

    return result;
  };

  function VectorTileLayer(pbf, end) {
    // Public
    this.version = 1;
    this.name = null;
    this.extent = 4096;
    this.length = 0;

    // Private
    this._pbf = pbf;
    this._keys = [];
    this._values = [];
    this._features = [];

    pbf.readFields(readLayer, this, end);

    this.length = this._features.length;
  }

  function readLayer(tag, layer, pbf) {
    if (tag === 15) layer.version = pbf.readVarint();
    else if (tag === 1) layer.name = pbf.readString();
    else if (tag === 5) layer.extent = pbf.readVarint();
    else if (tag === 2) layer._features.push(pbf.pos);
    else if (tag === 3) layer._keys.push(pbf.readString());
    else if (tag === 4) layer._values.push(readValueMessage(pbf));
  }

  function readValueMessage(pbf) {
    var value = null,
    end = pbf.readVarint() + pbf.pos;

    while (pbf.pos < end) {
      var tag = pbf.readVarint() >> 3;

      value = tag === 1 ? pbf.readString() :
        tag === 2 ? pbf.readFloat() :
        tag === 3 ? pbf.readDouble() :
        tag === 4 ? pbf.readVarint64() :
        tag === 5 ? pbf.readVarint() :
        tag === 6 ? pbf.readSVarint() :
        tag === 7 ? pbf.readBoolean() : null;
    }

    return value;
  }

  // return feature `i` from this layer as a `VectorTileFeature`
  VectorTileLayer.prototype.feature = function(i) {
    if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');

    this._pbf.pos = this._features[i];

    var end = this._pbf.readVarint() + this._pbf.pos;
    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);
  };

  VectorTileLayer.prototype.toGeoJSON = function(size, sx, sy) {
    const features = Array.from(Array(this._features.length), (v, i) => {
      return this.feature(i).toGeoJSON(size, sx, sy);
    });

    return { type: "FeatureCollection", features };
  };

  function VectorTile(pbf, end) {
    this.layers = pbf.readFields(readTile, {}, end);
  }

  function readTile(tag, layers, pbf) {
    if (tag === 3) {
      var layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);
      if (layer.length) layers[layer.name] = layer;
    }
  }

  var read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  var write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  var ieee754 = {
  	read: read,
  	write: write
  };

  var pbf = Pbf;



  function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
  }

  Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
  Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
      SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  // Threshold chosen based on both benchmarking and knowledge about browser string
  // data structures (which currently switch structure types at 12 bytes or more)
  var TEXT_DECODER_MIN_LENGTH = 12;
  var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');

  Pbf.prototype = {

      destroy: function() {
          this.buf = null;
      },

      // === READING =================================================================

      readFields: function(readField, result, end) {
          end = end || this.length;

          while (this.pos < end) {
              var val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      },

      readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      },

      readFixed32: function() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      readSFixed32: function() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readSFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readFloat: function() {
          var val = ieee754.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
      },

      readDouble: function() {
          var val = ieee754.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
      },

      readVarint: function(isSigned) {
          var buf = this.buf,
              val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      },

      readVarint64: function() { // for compatibility with v2.0.1
          return this.readVarint(true);
      },

      readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      },

      readBoolean: function() {
          return Boolean(this.readVarint());
      },

      readString: function() {
          var end = this.readVarint() + this.pos;
          var pos = this.pos;
          this.pos = end;

          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
              // longer strings are fast with the built-in browser TextDecoder API
              return readUtf8TextDecoder(this.buf, pos, end);
          }
          // short strings are fast with our custom implementation
          return readUtf8(this.buf, pos, end);
      },

      readBytes: function() {
          var end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      },

      // verbose for performance reasons; doesn't affect gzipped size

      readPackedVarint: function(arr, isSigned) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      },
      readPackedSVarint: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      },
      readPackedBoolean: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      },
      readPackedFloat: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      },
      readPackedDouble: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      },
      readPackedFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      },
      readPackedSFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      },
      readPackedFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      },
      readPackedSFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      },

      skip: function(val) {
          var type = val & 0x7;
          if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32) this.pos += 4;
          else if (type === Pbf.Fixed64) this.pos += 8;
          else throw new Error('Unimplemented type: ' + type);
      },

      // === WRITING =================================================================

      writeTag: function(tag, type) {
          this.writeVarint((tag << 3) | type);
      },

      realloc: function(min) {
          var length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              var buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.length = length;
          }
      },

      finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      },

      writeFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeSFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeSFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeVarint: function(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      },

      writeSVarint: function(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },

      writeBoolean: function(val) {
          this.writeVarint(Boolean(val));
      },

      writeString: function(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          var startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeFloat: function(val) {
          this.realloc(4);
          ieee754.write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
      },

      writeDouble: function(val) {
          this.realloc(8);
          ieee754.write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
      },

      writeBytes: function(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      },

      writeRawMessage: function(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
      },

      writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
      writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
      writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
      writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
      writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
      writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
      writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
      writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
      writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

      writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
      },
      writeFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
      },
      writeFloatField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
          this.writeVarintField(tag, Boolean(val));
      }
  };

  function readVarintRemainder(l, s, p) {
      var buf = p.buf,
          h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ?
          pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }

  function toNum(low, high, isSigned) {
      if (isSigned) {
          return high * 0x100000000 + (low >>> 0);
      }

      return ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  function writeBigVarint(val, pbf) {
      var low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
  function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
  function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
  function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
  function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
  function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
  function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
  function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
  function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  function readUInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] * 0x1000000);
  }

  function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = (val >>> 8);
      buf[pos + 2] = (val >>> 16);
      buf[pos + 3] = (val >>> 24);
  }

  function readInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] << 24);
  }

  function readUtf8(buf, pos, end) {
      var str = '';
      var i = pos;

      while (i < end) {
          var b0 = buf[i];
          var c = null; // codepoint
          var bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          var b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  function readUtf8TextDecoder(buf, pos, end) {
      return utf8TextDecoder.decode(buf.subarray(pos, end));
  }

  function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  const styleHref = "./fiord-color-style.json";
  const tileHref = "./maptiler_11-327-791.pbf";
  const tileSize = 512;

  function main() {
    const bboxes = [];

    // Get a Canvas2D rendering context
    const ctx = document.getElementById("tileCanvas").getContext("2d");
    ctx.canvas.width = tileSize;
    ctx.canvas.height = tileSize;

    // Load the style, and add painter functions
    let getStyle = parseStyle(styleHref)
      .then( addPainters );

    // Load a tile, parse to GeoJSON
    let getTile = xhrPromise(tileHref, "arraybuffer")
      .then( buffer => new VectorTile(new pbf(buffer)) )
      .then( mvt => mvtToJSON(mvt, tileSize) );

    // Render to the Canvas
    let render = Promise.all([getStyle, getTile])
      .then( ([style, tile]) => {
        let sources = { openmaptiles: tile };
        style.layers.forEach( layer => layer.painter(ctx, 11, sources, bboxes) );
      });
  }

  function mvtToJSON(tile, size) {
    // tile.laers is an object (not array!). In Mapbox Streets, it is an object
    // of { name: layer } pairs, where name = layer.name. But this is not
    // mentioned in the spec! So we use layer.name for safety
    const jsonLayers = {};
    Object.values(tile.layers).forEach(layer => {
      jsonLayers[layer.name] = layer.toGeoJSON(size);
    });
    return jsonLayers;
  }

  exports.main = main;

  return exports;

}({}));
